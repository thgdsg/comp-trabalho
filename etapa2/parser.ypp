%{
#include <stdio.h>
#include <stdlib.h>
#include <string>
using namespace std;
int yylex();
void yyerror(string msg);

%}
%locations
%token KW_BYTE
%token KW_INT
%token KW_REAL
%token KW_IF
%token KW_ELSE
%token KW_DO
%token KW_WHILE
%token KW_READ
%token KW_PRINT
%token KW_RETURN
%token OPERATOR_EQ
%token OPERATOR_LE
%token OPERATOR_GE
%token OPERATOR_DIF
%token TK_IDENTIFIER
%token LIT_INT
%token LIT_CHAR
%token LIT_REAL
%token LIT_STRING

%%

program: ldef
    ;

ldef: def ';' ldef
    | def
    |
    ;

def: cmdblock
    | cmd
    | vardec
    | fundec
    | vecdec

lit: LIT_INT
    | LIT_CHAR
    | LIT_REAL
    | LIT_STRING
    ;

vardec: KW_INT TK_IDENTIFIER '=' lit ';'
    | KW_REAL TK_IDENTIFIER '=' lit ';'
    | KW_BYTE TK_IDENTIFIER '=' lit ';'
    | vecdec
    ;

vecdec: KW_INT TK_IDENTIFIER '[' LIT_INT ']' '=' listvar ';'
    | KW_REAL TK_IDENTIFIER '[' LIT_INT ']' '=' listvar ';'
    | KW_BYTE TK_IDENTIFIER '[' LIT_INT ']' '=' listvar ';'
    | KW_INT TK_IDENTIFIER '[' LIT_INT ']' ';'
    | KW_REAL TK_IDENTIFIER '[' LIT_INT ']' ';'
    | KW_BYTE TK_IDENTIFIER '[' LIT_INT ']' ';'
    ;

listvar: lit ',' listvar
    | lit
    ;

fundec: KW_INT TK_IDENTIFIER '(' argl ')' '{' cmdblock '}'
    | KW_REAL TK_IDENTIFIER '(' argl ')' '{' cmdblock '}'
    | KW_BYTE TK_IDENTIFIER '(' argl ')' '{' cmdblock '}'
    ;

argl: arg ',' argl
    | arg
    ;

arg: KW_INT TK_IDENTIFIER
    | KW_REAL TK_IDENTIFIER
    | KW_BYTE TK_IDENTIFIER
    | 
    ;

cmdblock: '{' cmd '}' cmdblock
    | '{' cmd '}'
    ;

cmd: TK_IDENTIFIER '=' expr ';'
    | KW_IF '(' expr ')' cmd
    | KW_IF '(' expr ')' cmd KW_ELSE cmd
    | KW_WHILE expr KW_DO cmd
    | KW_DO cmd KW_WHILE expr ';'
    | KW_READ expr ';'
    | KW_PRINT expr ';'
    | KW_RETURN expr ';'
    | ';'
    ;


expr: TK_IDENTIFIER
    | LIT_INT
    | LIT_CHAR
    | LIT_REAL
    | LIT_STRING
    | A operator B
    | KW_INT TK_IDENTIFIER '(' exprlist ')'
    | KW_REAL TK_IDENTIFIER '(' exprlist ')'
    | KW_BYTE TK_IDENTIFIER '(' exprlist ')'
    | KW_INT TK_IDENTIFIER '(' ')'
    | KW_REAL TK_IDENTIFIER '(' ')'
    | KW_BYTE TK_IDENTIFIER '(' ')'
    ;

exprlist: expr ',' exprlist
    | expr
    ;

operator: '+'
    | '-'
    | '*'
    | '/'
    | '>'
    | '<'
    | '='
    | '&'
    | '|'
    | '~'
    | OPERATOR_EQ
    | OPERATOR_LE
    | OPERATOR_GE
    | OPERATOR_DIF
    ;

A: TK_IDENTIFIER
    | LIT_INT
    | LIT_CHAR
    | LIT_REAL
    | LIT_STRING
    ;

B: TK_IDENTIFIER
    | LIT_INT
    | LIT_CHAR
    | LIT_REAL
    | LIT_STRING
    ;

%%

void yyerror(string msg){
    extern YYLTYPE yylloc;
    fprintf(stderr, "Erro de sintaxe na linha %d: %s\n", yylloc.first_line, msg.c_str());
    exit(3);
}