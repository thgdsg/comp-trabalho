%{
#include <stdio.h>
#include <stdlib.h>
#include <string>
using namespace std;
int yylex();
void yyerror(string msg);

%}
%token KW_BYTE
%token KW_INT
%token KW_REAL
%token KW_IF
%token KW_ELSE
%token KW_DO
%token KW_WHILE
%token KW_READ
%token KW_PRINT
%token KW_RETURN
%token OPERATOR_EQ
%token OPERATOR_LE
%token OPERATOR_GE
%token OPERATOR_DIF
%token TK_IDENTIFIER
%token LIT_INT
%token LIT_CHAR
%token LIT_REAL
%token LIT_STRING
%token TOKEN_ERROR

%%

program: ldef
    ;

ldecl: dec ';' ldecl
    ;

dec: vardec
    | fundec
    ;

lit: LIT_INT
    | LIT_CHAR
    | LIT_REAL
    | LIT_STRING
    ;

vardec: KW_INT TK_IDENTIFIER '=' lit ';'
    | KW_REAL TK_IDENTIFIER '=' lit ';'
    | KW_BYTE TK_IDENTIFIER '=' lit ';'
    | vecdec
    ;

vecdec: KW_INT TK_IDENTIFIER '[' LIT_INT ']' '=' listvar ';'
    | KW_REAL TK_IDENTIFIER '[' LIT_INT ']' '=' listvar ';'
    | KW_BYTE TK_IDENTIFIER '[' LIT_INT ']' '=' listvar ';'
    | KW_INT TK_IDENTIFIER '[' LIT_INT ']' ';'
    | KW_REAL TK_IDENTIFIER '[' LIT_INT ']' ';'
    | KW_BYTE TK_IDENTIFIER '[' LIT_INT ']' ';'
    ;

listvar: lit ',' listvar
    | lit
    ;

fundec: KW_INT TK_IDENTIFIER '(' argl ')' '{' cmdl '}'
    | KW_REAL TK_IDENTIFIER '(' argl ')' '{' cmdl '}'
    | KW_BYTE TK_IDENTIFIER '(' argl ')' '{' cmdl '}'
    ;

argl: arg ',' argl
    | arg
    ;

arg: KW_INT TK_IDENTIFIER
    | KW_REAL TK_IDENTIFIER
    | KW_BYTE TK_IDENTIFIER
    | 
    ;

cmdl: '{' cmd '}' cmdl
    | '{' cmd '}'
    ;

cmd: TK_IDENTIFIER '=' expr ';'
    | KW_IF expr cmd
    | KW_IF expr cmd KW_ELSE cmd
    | KW_WHILE expr cmd
    | KW_DO cmd KW_WHILE expr ';'
    | KW_READ expr ';'
    | KW_PRINT expr ';'
    | KW_RETURN expr ';'
    | 
    ;

ldef: def ';' ldef
    |
    ;

expr: TK_IDENTIFIER
    | A '+' B
    |
    ;
%%

void yyerror(string msg){
    fprintf(stderr,"Erro de sintaxe\n");
    exit(3);
}